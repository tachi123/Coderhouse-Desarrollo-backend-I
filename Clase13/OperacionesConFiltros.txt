//Ejercicio 3:  Operaciones con filtros
//Insertar más documentos en la colección

//1. Insertar documentos adicionales
db.estudiantes.insertMany( [
    { nombre: "Pablo", edad: 25 },
    { nombre: "Juan", edad: 22 },
    { nombre: "Lucia", edad: 25 },
    { nombre: "Juan", edad: 29 },
    { nombre: "Fede", edad: 35 }
])

//2. Listar todos los documentos de la colección estudiantes ordenados por edad ascendente
db.estudiantes.find().sort({edad : 1})

//3. Listar todos los documentos de la colección estudiantes ordenados por edad descendente
db.estudiantes.find().sort({edad : -1})

//4. Listar el estudiante más joven
db.estudiantes.find().sort( {edad : 1}).limit(1)

//5. Listar los estudiantes llamados "Juan"
db.estudiantes.find( {nombre: "Juan"})

//6. Listar los estudiantes llamados "Juan" y que tengan 29 años
db.estudiantes.find( {nombre: "Juan", edad: 29})

//7. Listar los estudiantes llamados "Juan" o "Lucia"
db.estudiantes.find( 
    { $or: [ {nombre: "Juan"} , {nombre: "Lucía"}]}
)

//8. Listar los estudiantes que tengan más de 25 años
db.estudiantes.find( { edad: {$gt: 25}})

//9. Listar los estudiantes que tengan 25 años o menos
db.estudiantes.find( { edad: {$lte: 25}})

//10. Listar los estudiantes que NO tengan 25 años
db.estudiantes.find( { edad: {$ne: 25}})

//11. Listar los estudiantes que tengan entre los 26 y 35 años
db.estudiantes.find( { edad: {$gte: 26, $let: 35}})

// 12. Actualizar la edad de "Fede" a 36 años y verificar
db.estudiantes.updateOne( 
    {nombre: "Fede"},
    { $set: {edad: 36}}
)

// 13. Actualizar todas las edades de 25 años a 26 años
db.estudiantes.updateMany( {edad: 25} , {$set: {edad: 26}})

// 14. Borrar los estudiantes que se llamen "Juan" y listar el resultado
db.estudiantes.deleteMany( { nombre: "Juan"})

//15. Eliminar todos los documentos de estudiantes que hayan quedado con algún valor
db.estudiantes.deleteMany({});